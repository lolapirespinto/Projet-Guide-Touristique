

----------------------CREATE TABLE SESSIONS

CREATE TABLE IF NOT EXISTS "session" (
   "sid" varchar NOT NULL COLLATE "default",
   "sess" json NOT NULL,
   "expire" timestamp(6) NOT NULL
)
WITH (OIDS=FALSE);

ALTER TABLE "session" ADD CONSTRAINT "session_pkey" PRIMARY KEY ("sid") NOT DEFERRABLE INITIALLY IMMEDIATE;

CREATE INDEX "IDX_session_expire" ON "session" ("expire");

------------------CREATION CLIENT FICHIER POUR LA CONNEXION

require('dotenv').config();
const { Client } = require('pg')

const client = new Client({
    user: process.env.USER,
    host: process.env.HOST,
    database: process.env.DATABASE,
    password: process.env.PASSWORD,
    port: process.env.PORT,
})
client.connect()

module.exports = client

-----------------------IMPORTER EXPRESS SESSIONS

const session = require('express-session')

const verif_authentification = require("./script/js/verif_authentification")

                        VERIFIE SESSIONS EN COURS 

const verif_authentification = function (session) {
    if (session.user === undefined) {
        session.destroy((err) => { })
        return false
    }

    else {
        return true
    }
}

module.exports = verif_authentification

---------------------
Connect PG Simple => , minimal PostgreSQL session store for Express/Connect

--------------------
// Permet de setup une session express
app.use(session({
    store: new pgSession({
        pool : pgPool,
        tableName : 'session'
    }),
    secret: process.env.SESSION_SECRET,
    resave: true,
    saveUninitialized: true,
    cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 }
}));

// Method post pour la redirection des boutons donator et beneficiary
app.post('/home',  (req, res) => {
    if (req.session.user === undefined) {
        res.redirect('login')
    }

    else {
        if (req.body.hasOwnProperty("donator")) {
            res.redirect('/donator')
        }
        if (req.body.hasOwnProperty("beneficiary")) {
            res.redirect('/beneficiary')
        }
    }
})

// Route vers la page Comments
app.get('/comments', async (req, res) => {
    const data = await Comments.find_all_and_info_user()
    const connexion = req.session.user !== undefined

    res.render('pages/comments', {comments: data, connexion: connexion})
})

// Permet d'inscrire le commentaire de l'utilisateur connecté dans la base de donnée
app.post('/comments', async (req, res) => {
    const { comment } = req.body
    await Comments.create(comment, req.session.user.mail_user)

    res.redirect('/comments')
})

---------------------CREATION D'UN UTILISATEUR--------------------------------

 static create(mail_consumer, last_name, first_name, blood_group, gender, address, city, phone_number, password_user) {
        const sql = 'INSERT INTO consumer(mail_consumer, last_name, first_name, blood_group, gender, address, city, phone_number, password_user) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *'

        return client.query(sql, [mail_consumer, last_name, first_name, blood_group, gender, address, city, phone_number, password_user])
            .then(result => new User(result.rows[0]))
            .catch(e => console.error(e.stack))
    }

    static find(mail_consumer) {
        const sql = 'SELECT * FROM consumer WHERE mail_consumer = $1'

        return client.query(sql, [mail_consumer])
            .then(result => new User(result.rows[0]))
            .catch(e => console.error(e.stack))
    }

---------------------VALIDE CONNEXION--------------------------------

// Example starter JavaScript for disabling form submissions if there are invalid fields
(function () {
    'use strict'

    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    const forms = document.querySelectorAll('.needs-validation')
    // Loop over them and prevent submission
    Array.prototype.slice.call(forms)
        .forEach(function (form) {
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
            }, false)
        })
})()